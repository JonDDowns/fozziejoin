% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/extendr-wrappers.R
\name{fozzie_join}
\alias{fozzie_join}
\title{Performs a fuzzy join between two data frames based on approximate string matching.}
\usage{
fozzie_join(df1, df2, by, max_distance)
}
\description{
This function matches records in \code{df1} and \code{df2} using a specified column, allowing
matches within a given Levenshtein distance (\code{max_distance}). It builds index maps
for efficient lookup and comparison.
}
\section{Parameters}{
\itemize{
\item \code{df1} (\code{List}): The first data frame. Note dataframes are a list of equal-length vectors.
\item \code{df2} (\code{List}): The second data frame.
\item \code{by} (\verb{Vec<String>}): A vector containing column names to join on.
\itemize{
\item \code{by[0]}: Column name in \code{df1}.
\item \code{by[1]}: Column name in \code{df2}.
}
\item \code{max_distance} (\code{i32}): The maximum allowable Levenshtein distance for a match.
}
}

\section{Returns}{
\itemize{
\item \code{Robj}: A data frame containing matched records from both \code{df1} and \code{df2},
with column names suffixed as \code{.x} (from \code{df1}) and \code{.y} (from \code{df2}).
}
}

\section{Example}{
\if{html}{\out{<div class="sourceCode rust">}}\preformatted{use extendr_api::prelude::*;

fn main() \{
    let df1 = List::from_values(vec![
        ("name".to_string(), Robj::from(vec!["apple", "banana", "cherry"]))
    ]);

    let df2 = List::from_values(vec![
        ("name".to_string(), Robj::from(vec!["appl", "bananna", "berry"]))
    ]);

    let result = fuzzy_join(df1, df2, vec!["name".to_string(), "name".to_string()], 2);
    println!("\{:?\}", result);
\}
}\if{html}{\out{</div>}}
}

\section{Notes}{
\itemize{
\item This function leverages \strong{parallel iteration} (\code{par_iter()}) for performance optimization.
\item Ensures minimal redundant comparisons by only comparing unique values.
\item Only compares strings whose difference in length is within the user-specified max distance.
\item The resulting data frame maintains column alignment while allowing fuzzy matching.
}
}

\section{See Also}{
\itemize{
\item \href{https://docs.rs/levenshtein/latest/levenshtein/}{\code{levenshtein}} - Used for calculating string distances.
\item \href{https://extendr.github.io/}{\code{extendr}} - Enables Rust to interface with R.
\item \href{https://extendr.github.io/}{\verb{data_frame!}} - Constructs an R-compatible data frame.
}
}

