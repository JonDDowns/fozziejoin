% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/extendr-wrappers.R
\name{fozzie_join_rs}
\alias{fozzie_join_rs}
\title{Perform a fuzzy join between two R data frames using approximate string similarity.}
\usage{
fozzie_join_rs(
  df1,
  df2,
  by,
  method,
  how,
  max_distance,
  distance_col,
  q,
  max_prefix,
  prefix_weight,
  nthread
)
}
\description{
This function performs record linkage between \code{df1} and \code{df2}, allowing approximate
matches based on the specified join keys and string similarity metrics. The algorithm
efficiently computes pairwise distances using parallel iteration and indexed maps.
}
\section{Parameters}{
\itemize{
\item \code{df1} (\code{List}): The first data frame (as an R list).
\item \code{df2} (\code{List}): The second data frame (as an R list).
\item \code{by} (\code{List}): Named list of matching columns. Each name-value pair maps a column
in \code{df1} to a corresponding column in \code{df2}.
\item \code{method} (\code{String}): The similarity metric to use:
\itemize{
\item \code{"levenshtein"}, \code{"lv"} – Levenshtein edit distance
\item \code{"osa"} – Optimal string alignment
\item \code{"damerau_levensthein"}, \code{"dl"} – Damerau-Levenshtein distance
\item \code{"hamming"} – Hamming distance (requires equal-length strings)
\item \code{"lcs"} – Longest common subsequence
\item \code{"qgram"}, \code{"cosine"}, \code{"jaccard"} – Token-based methods (requires \code{q})
\item \code{"jaro_winkler"}, \code{"jw"} – Jaro-Winkler similarity (requires \code{max_prefix} & \code{prefix_weight})
}
\item \code{how} (\code{String}): Type of join:
\itemize{
\item \code{"inner"} – Only matching rows from both inputs (default)
\item \code{"left"} – All rows from \code{df1}, matched to \code{df2}
\item \code{"right"} – All rows from \code{df2}, matched to \code{df1}
\item \code{"anti"} – Only unmatched rows from \code{df1}
\item \code{"full"} – All matches across both inputs
}
\item \code{max_distance} (\code{f64}): Maximum similarity threshold. Depending on the method,
this acts as either a maximum distance or minimum similarity.
\item \code{distance_col} (\verb{Option<String>}): Optional name of a column to include per-match
distance or similarity score.
\item \code{q} (\verb{Option<i32>}): Gram size for \code{qgram}, \code{cosine}, and \code{jaccard}.
\item \code{max_prefix} (\verb{Option<i32>}): Required by \code{jaro_winkler}; controls prefix match scope.
\item \code{prefix_weight} (\verb{Option<f64>}): Required by \code{jaro_winkler}; adjusts prefix weight.
\item \code{nthread} (\verb{Option<usize>}): Number of threads to use (optional, defaults to all cores).
}
}

\section{Returns}{
An R-compatible data frame (\code{Robj}) containing the join result. Column names are suffixed:
\itemize{
\item \code{.x} for values from \code{df1}
\item \code{.y} for values from \code{df2}
}

If \code{distance_col} is specified, a numeric column is appended containing the calculated
similarity or distance for each match.
}

\section{Implementation Notes}{
\itemize{
\item Internally uses indexed lookup tables to avoid full pairwise string comparisons.
\item Supports multi-column matching and filters progressively across keys.
\item Distance results are transposed and aligned across join keys using \code{transpose_map}.
}
}

\section{Dependencies}{
Relies on the \code{extendr} framework for R interop and uses an internal fuzzy matching trait
that differs by distance metric: qgrams, edit distance, or normalized edit distance.
}

